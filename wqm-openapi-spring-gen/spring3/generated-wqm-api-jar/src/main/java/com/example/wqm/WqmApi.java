/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.wqm;

import org.openapitools.model.Queue;
import org.openapitools.model.WorkItem;
import org.openapitools.model.WqmQueuesPostRequest;
import org.openapitools.model.WqmQueuesQueueIdItemsItemIdPutRequest;
import org.openapitools.model.WqmQueuesQueueIdItemsPostRequest;
import org.openapitools.model.WqmQueuesQueueIdPutRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-10-23T10:21:02.177025-04:00[America/New_York]")
@Validated
@Tag(name = "Work Queues", description = "the Work Queues API")
public interface WqmApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /wqm/queues : Get a list of all work queues
     * Retrieve a list of all queue IDs and Names
     *
     * @param perPage The number of items per page (optional)
     * @param page The number of the page (optional)
     * @param queueType The type of the queue (LIFO, FIFO, NONE) (optional, default to FIFO)
     * @param queueStatus Status of the queues (ACTIVE, DELETED) (optional, default to ACTIVE)
     * @return A successful response (status code 200)
     *         or An internal server error (status code 500)
     */
    @Operation(
        operationId = "wqmQueuesGet",
        summary = "Get a list of all work queues",
        description = "Retrieve a list of all queue IDs and Names",
        tags = { "Work Queues" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "500", description = "An internal server error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/wqm/queues",
        produces = { "application/json" }
    )
    default ResponseEntity<Object> wqmQueuesGet(
        @DecimalMin("1") @Parameter(name = "per_page", description = "The number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "per_page", required = false) Object perPage,
        @DecimalMin("1") @Parameter(name = "page", description = "The number of the page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) Object page,
        @Parameter(name = "queue_type", description = "The type of the queue (LIFO, FIFO, NONE)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "queue_type", required = false, defaultValue = "FIFO") Object queueType,
        @Parameter(name = "queue_status", description = "Status of the queues (ACTIVE, DELETED)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "queue_status", required = false, defaultValue = "ACTIVE") Object queueStatus
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /wqm/queues : Create a new work queue
     * Create a new work queue with the specified name and description
     *
     * @param wqmQueuesPostRequest  (required)
     * @return The work queue was created successfully (status code 201)
     *         or The request was invalid (status code 400)
     *         or An internal server error (status code 500)
     */
    @Operation(
        operationId = "wqmQueuesPost",
        summary = "Create a new work queue",
        description = "Create a new work queue with the specified name and description",
        tags = { "Work Queues" },
        responses = {
            @ApiResponse(responseCode = "201", description = "The work queue was created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Queue.class))
            }),
            @ApiResponse(responseCode = "400", description = "The request was invalid"),
            @ApiResponse(responseCode = "500", description = "An internal server error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/wqm/queues",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Queue> wqmQueuesPost(
        @Parameter(name = "WqmQueuesPostRequest", description = "", required = true) @Valid @RequestBody WqmQueuesPostRequest wqmQueuesPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"queue_name\" : \"a-queue\", \"queue_type\" : \"FIFO\", \"queue_status\" : \"ACTIVE\", \"queue_desc\" : \"This is a work queue\", \"queue_id\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /wqm/queues/{queue_id} : Soft delete an existing work queue
     * Soft delete an existing work queue with the specified ID
     *
     * @param queueId The ID of the work queue, changing status to DELETED (required)
     * @return The work queue was deleted successfully (status code 204)
     *         or The work queue was not found (status code 404)
     *         or An internal server error (status code 500)
     */
    @Operation(
        operationId = "wqmQueuesQueueIdDelete",
        summary = "Soft delete an existing work queue",
        description = "Soft delete an existing work queue with the specified ID",
        tags = { "Work Queues" },
        responses = {
            @ApiResponse(responseCode = "204", description = "The work queue was deleted successfully"),
            @ApiResponse(responseCode = "404", description = "The work queue was not found"),
            @ApiResponse(responseCode = "500", description = "An internal server error")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/wqm/queues/{queue_id}"
    )
    default ResponseEntity<Void> wqmQueuesQueueIdDelete(
        @Parameter(name = "queue_id", description = "The ID of the work queue, changing status to DELETED", required = true, in = ParameterIn.PATH) @PathVariable("queue_id") Object queueId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /wqm/queues/{queue_id}/items : Get a list of open work queue items
     * Retrieve all open work queue item by queue ID
     *
     * @param queueId The ID of the work queue (required)
     * @param itemStatus Status of the work items (OPEN, LOCKED, PROCESSED, DELETED) (required)
     * @param perPage The number of items per page (optional)
     * @param page The number of the page (optional)
     * @param itemLock Lock work item(s) (LOCK, UNLOCK) (optional, default to LOCK)
     * @return A successful response (status code 200)
     *         or The work queue item was not found (status code 404)
     *         or An internal server error (status code 500)
     */
    @Operation(
        operationId = "wqmQueuesQueueIdItemsGet",
        summary = "Get a list of open work queue items",
        description = "Retrieve all open work queue item by queue ID",
        tags = { "Work Items" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkItem.class))
            }),
            @ApiResponse(responseCode = "404", description = "The work queue item was not found"),
            @ApiResponse(responseCode = "500", description = "An internal server error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/wqm/queues/{queue_id}/items",
        produces = { "application/json" }
    )
    default ResponseEntity<WorkItem> wqmQueuesQueueIdItemsGet(
        @Parameter(name = "queue_id", description = "The ID of the work queue", required = true, in = ParameterIn.PATH) @PathVariable("queue_id") Object queueId,
        @NotNull @Parameter(name = "item_status", description = "Status of the work items (OPEN, LOCKED, PROCESSED, DELETED)", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "item_status", required = true, defaultValue = "OPEN") Object itemStatus,
        @DecimalMin("1") @Parameter(name = "per_page", description = "The number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "per_page", required = false) Object perPage,
        @DecimalMin("1") @Parameter(name = "page", description = "The number of the page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) Object page,
        @Parameter(name = "item_lock", description = "Lock work item(s) (LOCK, UNLOCK)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "item_lock", required = false, defaultValue = "LOCK") Object itemLock
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"item_desc\" : \"This is a work item\", \"item_id\" : 1, \"item_name\" : \"work-item\", \"item_lock\" : \"UNLOCKED\", \"item_status\" : \"OPEN\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /wqm/queues/{queue_id}/items/{item_id} : Soft delete an existing work queue item
     * Soft delete an existing work queue item with the specified item ID
     *
     * @param queueId The ID of the work queue to delete the item from (required)
     * @param itemId The ID of the work item to delete (required)
     * @return The work item was deleted successfully (status code 204)
     *         or The work item was not found (status code 404)
     *         or An internal server error (status code 500)
     */
    @Operation(
        operationId = "wqmQueuesQueueIdItemsItemIdDelete",
        summary = "Soft delete an existing work queue item",
        description = "Soft delete an existing work queue item with the specified item ID",
        tags = { "Work Items" },
        responses = {
            @ApiResponse(responseCode = "204", description = "The work item was deleted successfully"),
            @ApiResponse(responseCode = "404", description = "The work item was not found"),
            @ApiResponse(responseCode = "500", description = "An internal server error")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/wqm/queues/{queue_id}/items/{item_id}"
    )
    default ResponseEntity<Void> wqmQueuesQueueIdItemsItemIdDelete(
        @Parameter(name = "queue_id", description = "The ID of the work queue to delete the item from", required = true, in = ParameterIn.PATH) @PathVariable("queue_id") Object queueId,
        @Parameter(name = "item_id", description = "The ID of the work item to delete", required = true, in = ParameterIn.PATH) @PathVariable("item_id") Object itemId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /wqm/queues/{queue_id}/items/{item_id} : Update an existing work queue item
     * Update an existing work queue item with the specified item ID
     *
     * @param wqmQueuesQueueIdItemsItemIdPutRequest  (required)
     * @param queueId The ID of the work queue to update the item in (required)
     * @param itemId The ID of the work queue item to update (required)
     * @return The work item was updated successfully (status code 200)
     *         or The request was invalid (status code 400)
     *         or The work item was not found (status code 404)
     *         or An internal server error (status code 500)
     */
    @Operation(
        operationId = "wqmQueuesQueueIdItemsItemIdPut",
        summary = "Update an existing work queue item",
        description = "Update an existing work queue item with the specified item ID",
        tags = { "Work Items" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The work item was updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkItem.class))
            }),
            @ApiResponse(responseCode = "400", description = "The request was invalid"),
            @ApiResponse(responseCode = "404", description = "The work item was not found"),
            @ApiResponse(responseCode = "500", description = "An internal server error")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/wqm/queues/{queue_id}/items/{item_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<WorkItem> wqmQueuesQueueIdItemsItemIdPut(
        @Parameter(name = "WqmQueuesQueueIdItemsItemIdPutRequest", description = "", required = true) @Valid @RequestBody WqmQueuesQueueIdItemsItemIdPutRequest wqmQueuesQueueIdItemsItemIdPutRequest,
        @Parameter(name = "queue_id", description = "The ID of the work queue to update the item in", required = true, in = ParameterIn.PATH) @PathVariable("queue_id") Object queueId,
        @Parameter(name = "item_id", description = "The ID of the work queue item to update", required = true, in = ParameterIn.PATH) @PathVariable("item_id") Object itemId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"item_desc\" : \"This is a work item\", \"item_id\" : 1, \"item_name\" : \"work-item\", \"item_lock\" : \"UNLOCKED\", \"item_status\" : \"OPEN\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /wqm/queues/{queue_id}/items : Add a new work queue item on the specified queue
     * Add a new work queue itemt on the specified queue by queue ID
     *
     * @param wqmQueuesQueueIdItemsPostRequest  (required)
     * @param queueId The ID of the work queue to add the item to (required)
     * @return The work queue item was added successfully (status code 201)
     *         or The request was invalid (status code 400)
     *         or The work was not found (status code 404)
     *         or An internal server error (status code 500)
     */
    @Operation(
        operationId = "wqmQueuesQueueIdItemsPost",
        summary = "Add a new work queue item on the specified queue",
        description = "Add a new work queue itemt on the specified queue by queue ID",
        tags = { "Work Items" },
        responses = {
            @ApiResponse(responseCode = "201", description = "The work queue item was added successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkItem.class))
            }),
            @ApiResponse(responseCode = "400", description = "The request was invalid"),
            @ApiResponse(responseCode = "404", description = "The work was not found"),
            @ApiResponse(responseCode = "500", description = "An internal server error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/wqm/queues/{queue_id}/items",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<WorkItem> wqmQueuesQueueIdItemsPost(
        @Parameter(name = "WqmQueuesQueueIdItemsPostRequest", description = "", required = true) @Valid @RequestBody WqmQueuesQueueIdItemsPostRequest wqmQueuesQueueIdItemsPostRequest,
        @Parameter(name = "queue_id", description = "The ID of the work queue to add the item to", required = true, in = ParameterIn.PATH) @PathVariable("queue_id") Object queueId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"item_desc\" : \"This is a work item\", \"item_id\" : 1, \"item_name\" : \"work-item\", \"item_lock\" : \"UNLOCKED\", \"item_status\" : \"OPEN\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /wqm/queues/{queue_id} : Update an existing work queue
     * Update an existing work queue with the specified ID
     *
     * @param wqmQueuesQueueIdPutRequest  (required)
     * @param queueId The ID of the work queue to update (required)
     * @return The work queue was updated successfully (status code 200)
     *         or The request was invalid (status code 400)
     *         or The work queue was not found (status code 404)
     *         or An internal server error (status code 500)
     */
    @Operation(
        operationId = "wqmQueuesQueueIdPut",
        summary = "Update an existing work queue",
        description = "Update an existing work queue with the specified ID",
        tags = { "Work Queues" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The work queue was updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Queue.class))
            }),
            @ApiResponse(responseCode = "400", description = "The request was invalid"),
            @ApiResponse(responseCode = "404", description = "The work queue was not found"),
            @ApiResponse(responseCode = "500", description = "An internal server error")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/wqm/queues/{queue_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Queue> wqmQueuesQueueIdPut(
        @Parameter(name = "WqmQueuesQueueIdPutRequest", description = "", required = true) @Valid @RequestBody WqmQueuesQueueIdPutRequest wqmQueuesQueueIdPutRequest,
        @Parameter(name = "queue_id", description = "The ID of the work queue to update", required = true, in = ParameterIn.PATH) @PathVariable("queue_id") Object queueId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"queue_name\" : \"a-queue\", \"queue_type\" : \"FIFO\", \"queue_status\" : \"ACTIVE\", \"queue_desc\" : \"This is a work queue\", \"queue_id\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /wqm/search : Search for work items
     * Search for work items by name or description
     *
     * @param searchQuery The search query to use (required)
     * @param queueId The ID of the work queue to search in (optional)
     * @return The search results were retrieved successfully (status code 200)
     *         or The request was invalid (status code 400)
     *         or An internal server error (status code 500)
     */
    @Operation(
        operationId = "wqmSearchGet",
        summary = "Search for work items",
        description = "Search for work items by name or description",
        tags = { "Search" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The search results were retrieved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "The request was invalid"),
            @ApiResponse(responseCode = "500", description = "An internal server error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/wqm/search",
        produces = { "application/json" }
    )
    default ResponseEntity<Object> wqmSearchGet(
        @NotNull @Parameter(name = "search_query", description = "The search query to use", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "search_query", required = true) Object searchQuery,
        @Parameter(name = "queue_id", description = "The ID of the work queue to search in", in = ParameterIn.QUERY) @Valid @RequestParam(value = "queue_id", required = false) Object queueId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
